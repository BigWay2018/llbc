/**
 * @file    LibConfigNative.cs
 * @author  Longwei Lai<lailongwei@126.com>
 * @date    --/--/--
 * @version 1.0
 *
 * @brief   llbc library native code wrapper.
 *          auto generated by tool, do not try to modify it!
 */

using System;
using System.Runtime.InteropServices;

namespace llbc
{

    /// <summary>
    /// Wrap common/_LibConfig.h file defined c functions
    /// </summary>
    internal partial class LLBCNative
    {
        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_DefaultBacklogSize();

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Log_DefaultLogLevel();

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Log_IsDirectFlushToConsole();

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Log_DefaultIsAsyncMode();

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Log_DefaultLogToConsole();

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Log_DefaultConsoleLogPattern(long pattern, int patternLen);

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Log_IsDeafaultEnabledColourfulOutput();

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Log_IsDefaultLogToFile();

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Log_DefaultLogFileName(long name, int nameLen);

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Log_DefaultFileLogPattern(long pattern, int patternLen);

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Log_IsDefaultEnabledDailyMode();

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static long csllbc_LibConfig_Log_MaxFileSize();

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Log_MaxBackupIndex();

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Log_DefaultLogFileBufferSize();

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Log_DefaultLogFlushInterval();

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Log_MaxLogFlushInterval();

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Log_TakeOverUnknownLoggerMsg();

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Thread_GuardDebug();

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Timer_StrictSchedule();

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Comm_IsNetOrder();

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Comm_DefaultConnTimeout();

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Comm_MaxEventCount();

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Comm_DefaultServiceFPS();

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Comm_MinServiceFPS();

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Comm_MaxServiceFPS();

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Comm_PerThreadDriveMaxServiceCount();

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Comm_IsEnabledSamplerSupport();

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Comm_IsUsedFullStack();

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Comm_IsEnabledStatusHandler();

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Comm_IsEnabledStatusDesc();

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Comm_IsEnabledUnifyPreSubscribe();

        [DllImport(NativeLibName, CallingConvention = CallingConvention.Cdecl)]
        public extern static int csllbc_LibConfig_Comm_PollerModel(long model, int modelLen);
    }
}
